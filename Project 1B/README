Name: Jahan Kuruvilla Cherian
UID: 104436427
Email: jcherian@ucla.edu
TA: Tuan Le
Professor: Mark Kampe

client.c:
	This file contains the C source code for initializing a non canonical/ non echo
	mode client terminal that connects to a corresponding server through TCP on
	localhost. This uses the socket API and thus allows for network based IPC.
	The client runs two threads wherein the main thread reads and writes one 
	character at a time from the keyboard and outputs it to STDOUT while also sending
	it over the socket to the server. The spawned thread on the other hands reads in
	the output from the socket file descriptor - that is everything coming from the
	server. The reads and writes are done one character at a time to maintain 
	consistency with the initial lab. The options supported by this executable are:
		--port=portno - used to specify the port number. This is a required argument
						and must use the same port number as the server.
		--log=filename - used to specify a logfile to log the sent and received bytes
						 during the IPC. This is an optional argument.
		--encrypt - used to encrypt data being sent from the client over the socket.
					Note that if the server does not have a corresponding encrypt
					flag on, then the user will find no output because the newline
					character will not be decrypted on the server side and so the shell
					will never execute the command and will thus output nothing over
					the socket. This command also enables decryption of the data sent
					through the socket.

server.c
	This file contains the C source code for setting up the corresponding server
	for TCP IPC data communication using the socket API. For convenience the server
	runs on the localhost address. The server simply acts as a gateway for the shell
	that is executed. The server forks a child process that executes the bash shell.
	The parent process that is the server spawns a thread that reads the output from
	the shell through a pipe and passes it through the socket to the client. The main thread on the
	other hand simply redirects stdin/stdout/stderr of the server to the newsocket file
	descriptor and passes the input received from the socket into the shell through
	a pipe. The server supports the following options:
		--port=portno - used to specify the port number. This is a required argument
						and the communication is only set up if the client connects
						to the same port number as the one specified on the server side.
						This is a required argument.
		--encrypt - used to encrypt data being sent from the shell over the socket
					to the client. With this flag on, data is also decrypted from
					the client side.

my.key:
	This file contains a randomly generated 10 byte long passphrase used for a simple
	encryption algorithm provided by libmcrypt - I use the blowfish with ofb mode.
	Note that in my server and client code, I use fstat to grab the key by initially
	getting the size of the file. This provides a quicker buffered grab of the bytes
	in the file.

Makefile:
	This file contains the basic make options for fluidity of running the program.
	server - Creates the server executable with -pthread and -libmcrypt flags
	client - Creates the client executable with -pthread and -libmcrypt flags
	default - calls the server and client targets to generate both executables at once 
	clean - Deletes any files generated in the build process such as the executables.
		
	dist - creates a tarball containing 5 key files - server.c, client.c, Makefile,
		   README and my.key. The name of the tarball contains my student ID.

README:
	A brief overview of the files and their contents in the submitted tarball.
